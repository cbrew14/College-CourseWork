library("doSNOW", lib.loc="~/R/win-library/3.4")
?createMultiFolds
library("kernlab", lib.loc="~/R/win-library/3.4")
cl <- makeCluster(8, type = "SOCK")
registerDoSNOW(cl)
install.packages("randomForest")
library("randomForest", lib.loc="~/R/win-library/3.4")
df <- dv[ , sapply(ds, class) == 'numeric']
di <- dv[ , sapply(ds, class) == 'integer']
df <- dv[ , sapply(dv, class) == 'numeric']
di <- dv[ , sapply(dv, class) == 'integer']
rf.label <- as.factor(theory$classe)
rf.train.num <- df
rf.train.int <- di
set.seed(2348)
cv.10.folds <- createMultiFolds(rf.label, k = 10, times = 10)
View(cv.10.folds)
table(rf.label)
table(rf.label[cv.10.folds[[33]]])
5022/12638
5580/14042
library("caret", lib.loc="~/R/win-library/3.4")
View(dv)
ctrl.1 <- trainControl(method = "repeatedcv", number = 10, repeats = 10, index = cv.10.folds)
set.seed(34324)
rf.int.cv.1 <- train(x = rf.train.int, y = rf.label, method = "rf", tuneLength = 3,
ntree = 1000, trControl = ctrl.1)
install.packages("e1071")
library("caret", lib.loc="~/R/win-library/3.4")
library("e1071", lib.loc="~/R/win-library/3.4")
set.seed(34324)
rf.int.cv.1 <- train(x = rf.train.int, y = rf.label, method = "rf", tuneLength = 3,
ntree = 1000, trControl = ctrl.1)
install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.4")
devtools::install_github('topepo/caret/pkg/cart')
install.packages("httr")
library("httr", lib.loc="~/R/win-library/3.4")
devtools::install_github('topepo/caret/pkg/cart')
library("devtools", lib.loc="~/R/win-library/3.4")
install_github('ramnathv/rCharts@dev')
install.packages("~/R/win-library/3.4/caret_6.0-76.tar.gz", repos = NULL, type = "source")
install.packages("caret")
devtools::install_github('topepo/caret/pkg/caret')
R.version
devtools::install_github('topepo/caret/pkg/caret')
library("e1071", lib.loc="~/R/win-library/3.4")
library("caret", lib.loc="~/R/win-library/3.4")
library("doSNOW", lib.loc="~/R/win-library/3.4")
cl <- makeCluster(8, type = "SOCK")
registerDoSNOW(cl)
set.seed(34324)
rf.int.cv.1 <- train(x = rf.train.int, y = rf.label, method = "rf", tuneLength = 3,
ntree = 1000, trControl = ctrl.1)
stopCluster(cl)
summary(rf.train.int)
rf.train.int2 = head(rf.train.int, 100)
cl <- makeCluster(6, type = "SOCK")
registerDoSNOW(cl)
set.seed(34324)
rf.int.cv.1 <- train(x = rf.train.int2, y = rf.label, method = "rf", tuneLength = 3,
ntree = 1000, trControl = ctrl.1)
rf.train.int2=rf.train.int[1:100]
install.packages("DataCombine")
library("caret", lib.loc="~/R/win-library/3.4")
library("DataCombine", lib.loc="~/R/win-library/3.4")
library("doSNOW", lib.loc="~/R/win-library/3.4")
library("e1071", lib.loc="~/R/win-library/3.4")
library("kernlab", lib.loc="~/R/win-library/3.4")
library("randomForest", lib.loc="~/R/win-library/3.4")
rf.train.1 <- data.frame(theory$roll_belt, theory$pitch_belt)
cl <- makeCluster(6, type = "SOCK")
registerDoSNOW(cl)
set.seed(34324)
rf.int.cv.1 <- train(x = rf.train.1, y = rf.label, method = "rf", tuneLength = 3,
ntree = 1000, trControl = ctrl.1)
stopCluster(cl)
dv$classe <- as.factor(dv$classe)
set.seed(425)
ind.dv <- sample(2, nrow(dv), replace = TRUE, prob = c(0.7, 0.3))
train.dv <- data[ind.dv==1,]
test.dv <- data[ind==2,]
View(dv)
ind.dv <- sample(2, nrow(dv), replace = TRUE, prob = c(0.7, 0.3))
train.dv <- data[ind.dv==1,]
test.dv <- data[ind.dv==2,]
ind_dv <- sample(2, nrow(dv), replace = TRUE, prob = c(0.7, 0.3))
train_dv <- data[ind_dv==1,]
summary(ind_dv)
?sample()
ind_dv <- sample(dv, replace = TRUE, prob = c(0.7, 0.3))
ind_dv <- sample(dv, 19622, replace = TRUE, prob = c(0.7, 0.3))
ind_dv <- sample(dv, 2, replace = TRUE, prob = c(0.7, 0.3))
ind_dv <- sample(2, nrow(dv) replace = TRUE, prob = c(0.7, 0.3))
ind_dv <- sample(2, nrow(dv), replace = TRUE, prob = c(0.7, 0.3))
train_dv <- data[ind_dv==1,]
train_dv <- dv[ind_dv==1,]
test_dv <- dv[ind_dv==2,]
set.seed(573)
rf <- randomForest(NSP~., dv=train_dv)
rf <- randomForest(classe~., dv=train_dv)
View(train_dv)
set.seed(573)
rf <- randomForest(classe~., dv=train_dv)
table(dv)
summary(dv)
set.seed(573)
rf <- randomForest(classe~., dv=train_dv)
set.seed(573)
rf <- randomForest(classe~., data = train_dv)
print(rf)
attributes(rf)
rf$confusion
p1 <- predict(rf, train_dv)
head(p1)
head(train_dv$classe)
table(train_dv$classe)
confusionMatrix(p1, train_dv$classe)
target <- dv$classe
set.seed(635)
intrain <- createDataPartition(dv$classe,p=0.6, list=FALSE)
training_score <- dv[intrain,]
testing_score <- dv[intrain,]
train_target <- training_score$classe
test_target <- testing_score$classe
testing_score <- dv[-intrain,]
target <- dv$classe
set.seed(635)
intrain <- createDataPartition(dv$classe,p=0.6, list=FALSE)
training_score <- dv[intrain,]
testing_score <- dv[-intrain,]
train_target <- training_score$classe
test_target <- test_score$classe
training_score <- training_score[,-which(colnames(training_score)=="class")]
test_score <- test_score[,-which(colnames(test_score)=="death")]
modelRF <- train(training_score, train_target, method="rf", trControl=control)
target <- dv$classe
set.seed(635)
intrain <- createDataPartition(dv$classe,p=0.6, list=FALSE)
training_score <- dv[intrain,]
testing_score <- dv[-intrain,]
train_target <- training_score$classe
test_target <- testing_score$classe
training_score <- training_score[,-which(colnames(training_score)=="class")]
test_score <- testing_score[,-which(colnames(test_score)=="death")]
modelRF <- train(training_score, train_target, method="rf", trControl=control)
target <- dv$classe
set.seed(635)
intrain <- createDataPartition(dv$classe,p=0.6, list=FALSE)
training_score <- dv[intrain,]
testing_score <- dv[-intrain,]
train_target <- training_score$classe
test_target <- testing_score$classe
training_score <- training_score[,-which(colnames(training_score)=="class")]
test_score <- testing_score[,-which(colnames(testing_score)=="death")]
modelRF <- train(training_score, train_target, method="rf", trControl=control)
install.packages("C50")
library("C50", lib.loc="~/R/win-library/3.4")
library("caret", lib.loc="~/R/win-library/3.4")
library("e1071", lib.loc="~/R/win-library/3.4")
modelRF <- train(training_score, train_target, method="rf", trControl=traincontrol())
modelRF <- train(training_score, train_target, method="rf")
target <- dv$classe
set.seed(635)
intrain <- createDataPartition(dv$classe,p=0.7, list=FALSE)
training_score <- dv[intrain,]
testing_score <- dv[-intrain,]
train_target <- training_score$classe
test_target <- testing_score$classe
training_score <- training_score[,-which(colnames(training_score)=="class")]
test_score <- testing_score[,-which(colnames(testing_score)=="death")]
modelRF <- train(classe~., data=train_target, method="rf", prox=TRUE)
training_score <- training_score[,-which(colnames(training_score)=="classe")]
test_score <- testing_score[,-which(colnames(testing_score)=="classe")]
modelRF <- train(classe~., data=train_target, method="rf", prox=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.4")
set.seed(635)
intrain <- createDataPartition(dv$classe,p=0.7, list=FALSE)
training_score <- dv[intrain,]
testing_score <- dv[-intrain,]
train_target <- training_score$classe
test_target <- testing_score$classe
training_score <- training_score[,-which(colnames(training_score)=="classe")]
test_score <- testing_score[,-which(colnames(testing_score)=="classe")]
modelRF <- train(classe~., data=train_target, method="rf", prox=TRUE)
View(dv)
set.seed(635)
intrain <- createDataPartition(dv$classe,p=0.7, list=FALSE)
training_score <- dv[intrain,]
testing_score <- dv[-intrain,]
modelRF <- train(classe~., data=training_score, method="rf", prox=TRUE)
detach("package:C50", unload=TRUE)
modelRF <- train(classe~., data=training_score, method="rf", prox=TRUE)
stopCluster(cl)
cl <- makeCluster(8, type = "SOCK")
registerDoSNOW(cl)
modelRF <- train(classe~., data=training_score, method="rf", prox=TRUE)
stopCluster(cl)
set.seed(573)
rf <- randomForest(classe~., data = training_score)
print(rf)
rf <- randomForest(classe~., data = train_dv)
predict(rf, test_dv)
p2 <- predict(rf, test_dv)
confusionMatrix(p2, train_dv$classe)
table(rf)
table(p2)
table(p2, train_dv$classe)
p2 <- predict(rf, test_dv)
confusionMatrix(p2, train_dv$classe)
confusionMatrix(p1, train_dv$classe)
dv = theory
set.seed(425)
ind_dv <- sample(2, nrow(dv), replace = TRUE, prob = c(0.7, 0.3))
train_dv <- dv[ind_dv==1,]
test_dv <- dv[ind_dv==2,]
library(randomForest)
set.seed(573)
rf <- randomForest(classe~., data = train_dv)
print(rf)
library("randomForest", lib.loc="~/R/win-library/3.4")
rf <- randomForest(classe~., data = train_dv)
train_dv <- as.data.frame(train_dv)
set.seed(573)
rf <- randomForest(classe~., data = train_dv)
table(train_dv)
View(train_dv)
train_dv <- as.factor(train_dv)
dv$X <- NULL
train_dv <- as.factor(train_dv)
train_dv <- as.data.frame(train_dv)
set.seed(573)
rf <- randomForest(classe~., data = train_dv)
yes
print(rf)
p1 <- predict(rf, train_dv)
confusionMatrix(p1, train_dv$classe)
table(p1)
summary(p1)
p1
table(factor(p1, levels=min(test):max(test)), factor(test, levels=min(test):max(test)))
table(factor(p1, levels=min(test_dv):max(test_dv)), factor(test, levels=min(test_dv):max(test_dv)))
table(factor(p1, levels=min(test_dv):max(test_dv)), factor(test_dv, levels=min(test_dv):max(test_dv)))
library("kernlab", lib.loc="~/R/win-library/3.4")
hope <- dv
hope_inTrain <- createDataPartition(y=hope$classe, p=0.75, list=FALSE)
hope_train <- hope[hope_inTrain,]
hope_test <- hope[-hope_inTrain]
dim(hope_train)
dim(hope_test)
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_inTrain <- createDataPartition(y=hope$classe, p=0.75, list=FALSE, times = 1)
hope_train <- hope[hope_inTrain,]
hope_test <- hope[-hope_inTrain]
objControl <- trainControl(method = 'cv', number=3, returnResamp = 'none'
,summaryFunction = twoClassSummary, classProbs = TRUE)
hope_modelfit <- train(classe~.,data=hope_train, method="gbm")
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, trControl=objControl method="gbm")
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, trControl=objControl, method="gbm")
hope_train = as.factor(hope_train[[1]])
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
dim(hope_train)
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_train = as.data.frame(hope_train)
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
dim(hope_train)
dim(hope_train)
hope_train <- hope[hope_inTrain,]
dim(hope_train)
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
library("caret", lib.loc="~/R/win-library/3.4")
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train, method="glm")
set.seed(32343)
hope_modelfit <- train(classe~.,data=hope_train)
set.seed(573)
rf <- randomForest(classe~., data = train_dv)
print(rf)
dim(rf)
dv_train <- as.factor(train_dv)
is.factor(train_dv$classe)
train_dv$classe <- as.factor(train_dv$classe)
library(randomForest)
set.seed(573)
rf <- randomForest(classe~., data = train_dv)
print(rf)
p1 <- predict(rf, train_dv)
confusionMatrix(p1, train_dv$classe)
p2 <- predict(rf, test_dv)
confusionMatrix(p2, train_dv$classe)
train_dv$X <- NULL
set.seed(425)
ind_dv <- sample(2, nrow(dv), replace = TRUE, prob = c(0.7, 0.3))
train_dv <- dv[ind_dv==1,]
test_dv <- dv[ind_dv==2,]
train_dv <- as.data.frame(train_dv)
train_dv$classe <- as.factor(train_dv$classe)
set.seed(573)
rf <- randomForest(classe~., data = train_dv)
print(rf)
p1 <- predict(rf, train_dv)
confusionMatrix(p1, train_dv$classe)
p2 <- predict(rf, test_dv)
confusionMatrix(p2, train_dv$classe)
print(rf)
p2 <- predict(rf, test_dv)
confusionMatrix(p2, train_dv$classe)
View(test_dv)
confusionMatrix(p2, test_dv$classe)
plot(rf)
set.seed(6872)
cv.10.folds <- createMultiFolds(dv$classe, k=10, times = 10)
ctrl.1 <- trainControl(method = "repeatedcv", number = 10, repeats = 10, index = cv.10.folds)
library("doSNOW", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
cl <- makeCluster(4, type = "SOCK")
registerDoSNOW(cl)
set.seed(4762)
rf.cv.1 <- train(x=rf, y=dv$classe, method="rf", tuneLenght = 3,
ntree = 1000, trControl = ctrl.1)
install.packages("VSURF")
library("VSURF", lib.loc="~/R/win-library/3.4")
set.seed(4762)
rf.cv.1 <- train(x = dv, y=dv$classe, method="rf", tuneLenght = 3,
ntree = 1000, trControl = ctrl.1)
registerDoSNOW(cl)
is.factor(dv$classe)
dv$classe <- as.factor(dv$classe)
View(test)
ptest <- predict(rf,test)
confusionMatrix(ptest, test$classe)
install.packages("randomForestSRC")
library("e1071", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
library("kernlab", lib.loc="~/R/win-library/3.4")
library("randomForest", lib.loc="~/R/win-library/3.4")
library("randomForestSRC", lib.loc="~/R/win-library/3.4")
?var.select
var.select(classe~., train_dv)
dv_var1 <- data.frame(dv$pitch_forearm,dv$magnet_dumbbell_z,dv$roll_forearm)
dv_var2 <- data.frame(dv$gyros_belt_z,dv$gyros_forearm_x,dv$gyros_belt_z)
dv_var1 <- data.frame(dv$pitch_forearm,dv$magnet_dumbbell_z,dv$roll_forearm,dv$classe)
dv_var2 <- data.frame(dv$gyros_belt_z,dv$gyros_forearm_x,dv$gyros_belt_z,dv$classe)
var.select(classe~., train_dv, mtry = 7)
rf_var1 <- randomForest(classe~., data=dv_var1$classe)
rf_var2 <- randomForest(classe~., data=dv_var2$classe)
View(dv_var2)
set.seed(835)
rf_var1 <- randomForest(classe~., data=dv_var1)
rf_var2 <- randomForest(classe~., data=dv_var2)
rf <- randomForest(classe~., data = train_dv)
dv_var1$dv.classe <- as.factor(dv_var1$dv.classe)
rf_var1 <- randomForest(classe~., data=dv_var1)
set.seed(835)
rf_var1 <- randomForest(dv.classe~., data=dv_var1)
rf_var2 <- randomForest(dv.classe~., data=dv_var2)
p_var1 <- predict(rf_var1, dv_var1)
p_var2 <- predict(rf_var2, dv_var2)
confusionMatrix(p_var1, dv_var1$dv.classe)
confusionMatrix(p_var2, dv_var2$dv.classe)
dv_var1 <- data.frame(dv$pitch_forearm,dv$magnet_dumbbell_z,dv$roll_forearm,
dv$magnet_dumbbell_y,dv$classe)
set.seed(835)
rf_var1 <- randomForest(dv.classe~., data=dv_var1)
p_var1 <- predict(rf_var1, dv_var1)
confusionMatrix(p_var1, dv_var1$dv.classe)
dv_var1 <- data.frame(dv$pitch_forearm,dv$magnet_dumbbell_z,dv$roll_forearm,
dv$magnet_dumbbell_y,dv$roll_arm,dv$classe)
set.seed(835)
rf_var1 <- randomForest(dv.classe~., data=dv_var1)
p_var1 <- predict(rf_var1, dv_var1)
confusionMatrix(p_var1, dv_var1$dv.classe)
dv_var1 <- data.frame(dv$pitch_forearm,dv$magnet_dumbbell_z,dv$roll_forearm,
dv$magnet_dumbbell_y,dv$roll_arm,dv$magnet_arm_x,dv$classe)
set.seed(835)
rf_var1 <- randomForest(dv.classe~., data=dv_var1)
p_var1 <- predict(rf_var1, dv_var1)
confusionMatrix(p_var1, dv_var1$dv.classe)
dv_var1 <- data.frame(dv$pitch_forearm,dv$magnet_dumbbell_z,dv$roll_forearm,
dv$magnet_dumbbell_y,dv$roll_arm,dv$magnet_arm_x,
dv$total_accel_dumbbell,dv$classe)
set.seed(835)
rf_var1 <- randomForest(dv.classe~., data=dv_var1)
p_var1 <- predict(rf_var1, dv_var1)
confusionMatrix(p_var1, dv_var1$dv.classe)
p2_var1 <- predict(rf_var1, dv_var1$dv.classe)
View(dv_var1)
dv_var1 <- data.frame(dv$pitch_forearm,dv$magnet_dumbbell_z,dv$roll_forearm,
dv$magnet_dumbbell_y,dv$roll_arm,dv$magnet_arm_x,
dv$classe)
set.seed(835)
rf_var1 <- randomForest(dv.classe~., data=dv_var1)
p_var1 <- predict(rf_var1, dv_var1)
confusionMatrix(p_var1, dv_var1$dv.classe)
p2_var1 <- predict(rf_var1, test_dv)
summary(rf_var1)
train_2 <- train_dv.combined[1:13816, c("pitch_forearm", "magnet_dumbbell_z",
"roll_forearm", "magnet_dumbbell_y", "roll_arm magnet_arm_x")]
train_2 <- train_dv.combine[1:13816, c("pitch_forearm", "magnet_dumbbell_z",
"roll_forearm", "magnet_dumbbell_y", "roll_arm magnet_arm_x")]
p2_var1 <- predict(rf_var1, test_dv)
confusionMatrix(ptest, test$classe, type="response")
confusionMatrix(ptest, test, type="response")
View(test)
p2_var1 <- predict(rf_var1, test_dv)
dv_var1 <- train_dv[c("pitch_forearm","magnet_dumbbell_z","roll_forearm",
"magnet_dumbbell_y","roll_arm","magnet_arm_x",
"classe")]
View(dv_var1)
dv_var1$classe <- as.factor(dv_var1$classe)
set.seed(835)
rf_var1 <- randomForest(classe~., data=dv_var1)
p_var1 <- predict(rf_var1, dv_var1)
confusionMatrix(p_var1, dv_var1$dv.classe)
confusionMatrix(p_var1, dv_var1$classe)
p2_var1 <- predict(rf_var1, test_dv)
confusionMatrix(p2_var1, test_dv$classe )
confusionMatrix(p2, test_dv$classe)
dv_var1 <- train_dv[c("pitch_forearm","magnet_dumbbell_z","roll_forearm",
"magnet_dumbbell_y","roll_arm","magnet_arm_x","total_accel_dumbbell",
"classe")]
set.seed(835)
rf_var1 <- randomForest(classe~., data=dv_var1)
p2_var1 <- predict(rf_var1, test_dv)
confusionMatrix(p2_var1, test_dv$classe )
library("caret", lib.loc="~/R/win-library/3.4")
library("e1071", lib.loc="~/R/win-library/3.4")
library("kernlab", lib.loc="~/R/win-library/3.4")
library("randomForest", lib.loc="~/R/win-library/3.4")
install.packages("rpart")
library("randomForest", lib.loc="~/R/win-library/3.4")
library("kernlab", lib.loc="~/R/win-library/3.4")
library("e1071", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
library("caret", lib.loc="~/R/win-library/3.4")
library("rpart", lib.loc="C:/Program Files/R/R-3.4.2/library")
model <- rpart(classe ~ pitch_forearm+magnet_dumbbell_z+roll_forearm+
magnet_dumbbell_y+roll_arm+magnet_arm_x+
total_accel_dumbbell, method = "class", data = dv_var1)
model
model*test
prediction <- predict(model,test)
View(prediction)
View(test)
library("doSNOW", lib.loc="~/R/win-library/3.4")
cl <- makeCluster(8, type = "SOCK")
registerDoSNOW(cl)
set.seed(7358)
tr_control <- trainControl(method = "boot", number = 100)
boot_strap <- train(classe~., data = dv_var1, trControl=train_control, method'nb')
boot_strap <- train(classe~., data = dv_var1, trControl=train_control, method='nb')
boot_strap <- train(classe~., data = dv_var1, trControl=tr_control, method='nb')
boot_strap
stopCluster(cl)
summary(train)
dim(train)
plot(rf)
plot(dv)
barplot(dv)
